{"version":3,"sources":["components/toolbar/toolbar.jsx","components/colourpalette/colourpalette.jsx","components/sizeslider/sizeslider.jsx","App.js","serviceWorker.js","index.js"],"names":["ToolBar","props","className","onClick","onClearButtonClick","size","color","onColourPaletteClick","onResizeClick","ColourPalette","isVisible","style","visibility","onColourChoose","SizeSlider","App","displayColourPalette","setState","state","displaySizeSlider","changeColour","colour","brushColour","console","log","clearCanvas","saveableCanvas","clear","this","ref","canvasDraw","canvasWidth","brushColor","brushRadius","hideGrid","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6UAiDeA,EAtCQ,SAACC,GAEtB,OACE,oCAEE,yBAAKC,UAAU,WACb,4BACCA,UAAU,iBACVC,QAASF,EAAMG,oBAEd,kBAAC,IAAD,CACAC,KAAK,MACLC,MAAM,UAGR,4BACCJ,UAAU,iBACVC,QAASF,EAAMM,sBAEd,kBAAC,IAAD,CACAF,KAAK,MACLC,MAAM,UAGR,4BACCJ,UAAU,iBACVC,QAASF,EAAMO,eAEd,kBAAC,IAAD,CACAH,KAAK,MACLC,MAAM,aCpBDG,G,MAlBc,SAACR,GAE5B,IAAMS,EAAYT,EAAMS,UAExB,OACE,yBAAKR,UAAU,iBACfS,MAAO,CAACC,WAAYF,EAAY,UAAY,WAE5C,yBAAKR,UAAU,SAASC,QAAS,kBAAMF,EAAMY,eAAe,YAA5D,KACA,yBAAKX,UAAU,QAAQC,QAAS,kBAAMF,EAAMY,eAAe,WAA3D,KACA,yBAAKX,UAAU,OAAOC,QAAS,kBAAMF,EAAMY,eAAe,UAA1D,QCMWC,G,MAhBW,SAACb,GAEzB,IAAMS,EAAYT,EAAMS,UAExB,OACE,yBAAKR,UAAU,cACfS,MAAO,CAACC,WAAYF,EAAY,UAAY,WAE5C,iECsEWK,E,kDAxEb,aAAc,IAAD,8BACX,gBASFC,qBAAuB,WACrB,EAAKC,SAAS,CACZD,sBAAuB,EAAKE,MAAMF,qBAClCG,mBAAmB,KAbV,EAiBbA,kBAAoB,WAClB,EAAKF,SAAS,CACZD,sBAAsB,EACtBG,mBAAoB,EAAKD,MAAMC,qBApBtB,EAwBbC,aAAe,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,IAAS,WACnCE,QAAQC,IAAI,EAAKN,MAAMI,iBA1Bd,EA8BbG,YAAc,WACZ,EAAKC,eAAeC,QACpB,EAAKV,SAAS,CAACD,sBAAsB,KA7BrC,EAAKE,MAAQ,CACXI,YAAa,OACbN,sBAAsB,EACtBG,mBAAmB,GANV,E,qDAmCJ,IAAD,OACN,OACE,yBAAKjB,UAAU,OACX,kBAAC,EAAD,CACAE,mBAAoBwB,KAAKH,YACzBlB,qBAAsBqB,KAAKZ,qBAC3BR,cAAeoB,KAAKT,oBAItB,kBAAC,EAAD,CACET,UAAWkB,KAAKV,MAAMF,qBACtBH,eAAgB,SAACQ,GAAD,OAAY,EAAKD,aAAaC,MAEhD,kBAAC,EAAD,CACEX,UAAWkB,KAAKV,MAAMC,oBAKxB,kBAAC,IAAD,CACEU,IAAK,SAAAC,GAAU,OAAK,EAAKJ,eAAiBI,GAC1CC,YAAY,MACZC,WAAYJ,KAAKV,MAAMI,YACvBW,YAAY,IACZC,SAAS,SAGX,gCACQ,yD,GAlEEC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.bb1ccefa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './toolbar.css';\r\nimport { BiBrush } from 'react-icons/bi';\r\nimport { MdColorLens } from 'react-icons/md';\r\nimport { IoMdResize } from 'react-icons/io'\r\n\r\n\r\nexport const ColourPalette = ({show}) => {\r\n\r\n}\r\n\r\nexport const ToolBar = (props) => {\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"toolbar\">\r\n        <button\r\n         className=\"toolbar-button\"\r\n         onClick={props.onClearButtonClick}\r\n        >\r\n          <BiBrush\r\n          size=\"2em\"\r\n          color=\"gray\" />\r\n        </button>\r\n\r\n        <button\r\n         className=\"toolbar-button\"\r\n         onClick={props.onColourPaletteClick}\r\n        >\r\n          <MdColorLens\r\n          size=\"2em\"\r\n          color=\"gray\" />\r\n        </button>\r\n\r\n        <button\r\n         className=\"toolbar-button\"\r\n         onClick={props.onResizeClick}\r\n        >\r\n          <IoMdResize\r\n          size=\"2em\"\r\n          color=\"gray\" />\r\n        </button>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToolBar;\r\n","import React from 'react';\r\nimport './colourpalette.css';\r\n\r\nexport const ColourPalette = (props) => {\r\n\r\n  const isVisible = props.isVisible;\r\n\r\n  return (\r\n    <div className=\"colour-palette\"\r\n    style={{visibility: isVisible ? \"visible\" : \"hidden\"}}>\r\n\r\n    <div className=\"yellow\" onClick={() => props.onColourChoose(\"yellow\")} > </div>\r\n    <div className=\"black\" onClick={() => props.onColourChoose(\"black\")}> </div>\r\n    <div className=\"blue\" onClick={() => props.onColourChoose(\"blue\")}> </div>\r\n\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default ColourPalette;\r\n","import React from 'react';\r\nimport './sizeslider.css';\r\n\r\nexport const SizeSlider = (props) => {\r\n\r\n  const isVisible = props.isVisible;\r\n\r\n  return (\r\n    <div className=\"size-slider\"\r\n    style={{visibility: isVisible ? \"visible\" : \"hidden\"}}>\r\n\r\n    <p> Brush size slider coming soon </p>\r\n\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default SizeSlider;\r\n","import React from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport ToolBar from './components/toolbar/toolbar';\nimport ColourPalette from './components/colourpalette/colourpalette';\nimport SizeSlider from './components/sizeslider/sizeslider';\nimport './index.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      brushColour: \"#000\",\n      displayColourPalette: false,\n      displaySizeSlider: false,\n    }\n  }\n\n  displayColourPalette = () => {\n    this.setState({\n      displayColourPalette: !this.state.displayColourPalette,\n      displaySizeSlider: false\n    })\n  }\n\n  displaySizeSlider = () => {\n    this.setState({\n      displayColourPalette: false,\n      displaySizeSlider: !this.state.displaySizeSlider\n    })\n  }\n\n  changeColour = (colour) => {\n    this.setState({brushColour: colour}, () => {\n      console.log(this.state.brushColour);\n    })\n  }\n\n  clearCanvas = () => {\n    this.saveableCanvas.clear()\n    this.setState({displayColourPalette: false})\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <ToolBar\n          onClearButtonClick={this.clearCanvas}\n          onColourPaletteClick={this.displayColourPalette}\n          onResizeClick={this.displaySizeSlider}\n        />\n\n\n        <ColourPalette\n          isVisible={this.state.displayColourPalette}\n          onColourChoose={(colour) => this.changeColour(colour)}\n          />\n        <SizeSlider\n          isVisible={this.state.displaySizeSlider}\n\n        />\n\n\n        <CanvasDraw\n          ref={canvasDraw => (this.saveableCanvas = canvasDraw)}\n          canvasWidth=\"400\"\n          brushColor={this.state.brushColour}\n          brushRadius=\"1\"\n          hideGrid=\"true\"\n        />\n\n        <footer>\n                <p> Created by Cherrie </p>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}